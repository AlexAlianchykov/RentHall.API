// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentHall.DataAccess;

#nullable disable

namespace RentHall.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentHall.DataAccess.Entities.AdditionalServicesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Additionals");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.BookingAdditionalServicesEntity", b =>
                {
                    b.Property<Guid>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalServicesID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingID", "AdditionalServicesID");

                    b.HasIndex("AdditionalServicesID");

                    b.ToTable("BookingsAdditionals");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("HallID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartBooking")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HallID");

                    b.HasIndex("UserID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.HallAdditionalServicesEntity", b =>
                {
                    b.Property<Guid>("HallID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalServicesID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HallID", "AdditionalServicesID");

                    b.HasIndex("AdditionalServicesID");

                    b.ToTable("HallsAdditionals");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.HallEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Сapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailUser")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.BookingAdditionalServicesEntity", b =>
                {
                    b.HasOne("RentHall.DataAccess.Entities.AdditionalServicesEntity", "AdditionalServicesEntity")
                        .WithMany("BookingsServces")
                        .HasForeignKey("AdditionalServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHall.DataAccess.Entities.BookingEntity", "BookingEntity")
                        .WithMany("BookingsServces")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalServicesEntity");

                    b.Navigation("BookingEntity");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.BookingEntity", b =>
                {
                    b.HasOne("RentHall.DataAccess.Entities.HallEntity", "HallEntity")
                        .WithMany("Bookings")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHall.DataAccess.Entities.UserEntity", "UserEntity")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HallEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.HallAdditionalServicesEntity", b =>
                {
                    b.HasOne("RentHall.DataAccess.Entities.AdditionalServicesEntity", "AdditionalServicesEntity")
                        .WithMany("HallsServices")
                        .HasForeignKey("AdditionalServicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentHall.DataAccess.Entities.HallEntity", "HallEntity")
                        .WithMany("HallsServices")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalServicesEntity");

                    b.Navigation("HallEntity");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.AdditionalServicesEntity", b =>
                {
                    b.Navigation("BookingsServces");

                    b.Navigation("HallsServices");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.BookingEntity", b =>
                {
                    b.Navigation("BookingsServces");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.HallEntity", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HallsServices");
                });

            modelBuilder.Entity("RentHall.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
